<?php

/**
 * You don't include this file.
 */

namespace NFC\Contexts
{
    /**
     * @method int libusb_init(\FFI\CData $ctx)
     * @method void libusb_exit(\FFI\CData $ctx)
     * @method void libusb_set_debug(\FFI\CData $ctx, int $level)
     * @method \FFI\CData libusb_get_version()
     * @method int libusb_has_capability(\FFI\CData $capability)
     * @method \FFI\CData libusb_error_name(int $errcode)
     * @method int libusb_setlocale(string $locale)
     * @method \FFI\CData libusb_strerror(int $errcode)
     * @method int libusb_get_device_list(\FFI\CData $ctx, \FFI\CData $list)
     * @method void libusb_free_device_list(\FFI\CData $list, int $unref_devices)
     * @method \FFI\CData libusb_ref_device(\FFI\CData $dev)
     * @method void libusb_unref_device(\FFI\CData $dev)
     * @method int libusb_get_configuration(\FFI\CData $dev, \FFI\CData $config)
     * @method int libusb_get_device_descriptor(\FFI\CData $dev, \FFI\CData $desc)
     * @method int libusb_get_active_config_descriptor(\FFI\CData $dev, \FFI\CData $config)
     * @method int libusb_get_config_descriptor(\FFI\CData $dev, int $config_index, \FFI\CData $config)
     * @method int libusb_get_config_descriptor_by_value(\FFI\CData $dev, int $bConfigurationValue, \FFI\CData $config)
     * @method void libusb_free_config_descriptor(\FFI\CData $config)
     * @method int libusb_get_ss_endpoint_companion_descriptor(\FFI\CData $ctx, \FFI\CData $endpoint, \FFI\CData $ep_comp)
     * @method void libusb_free_ss_endpoint_companion_descriptor(\FFI\CData $ep_comp)
     * @method int libusb_get_bos_descriptor(\FFI\CData $dev_handle, \FFI\CData $bos)
     * @method void libusb_free_bos_descriptor(\FFI\CData $bos)
     * @method int libusb_get_usb_2_0_extension_descriptor(\FFI\CData $ctx, \FFI\CData $dev_cap, \FFI\CData $usb_2_0_extension)
     * @method void libusb_free_usb_2_0_extension_descriptor(\FFI\CData $usb_2_0_extension)
     * @method int libusb_get_ss_usb_device_capability_descriptor(\FFI\CData $ctx, \FFI\CData $dev_cap, \FFI\CData $ss_usb_device_cap)
     * @method void libusb_free_ss_usb_device_capability_descriptor(\FFI\CData $ss_usb_device_cap)
     * @method int libusb_get_container_id_descriptor(\FFI\CData $ctx, \FFI\CData $dev_cap, \FFI\CData $container_id)
     * @method void libusb_free_container_id_descriptor(\FFI\CData $container_id)
     * @method int libusb_get_bus_number(\FFI\CData $dev)
     * @method int libusb_get_port_number(\FFI\CData $dev)
     * @method int libusb_get_port_numbers(\FFI\CData $dev, \FFI\CData $port_numbers, int $port_numbers_len)
     * @method int libusb_get_port_path(\FFI\CData $ctx, \FFI\CData $dev, \FFI\CData $path, int $path_length)
     * @method \FFI\CData libusb_get_parent(\FFI\CData $dev)
     * @method int libusb_get_device_address(\FFI\CData $dev)
     * @method int libusb_get_device_speed(\FFI\CData $dev)
     * @method int libusb_get_max_packet_size(\FFI\CData $dev, char $endpoint)
     * @method int libusb_get_max_iso_packet_size(\FFI\CData $dev, char $endpoint)
     * @method int libusb_wrap_sys_device(\FFI\CData $ctx, \FFI\CData $sys_dev, \FFI\CData $dev_handle)
     * @method int libusb_open(\FFI\CData $dev, \FFI\CData $dev_handle)
     * @method void libusb_close(\FFI\CData $dev_handle)
     * @method \FFI\CData libusb_get_device(\FFI\CData $dev_handle)
     * @method int libusb_set_configuration(\FFI\CData $dev_handle, int $configuration)
     * @method int libusb_claim_interface(\FFI\CData $dev_handle, int $interface_number)
     * @method int libusb_release_interface(\FFI\CData $dev_handle, int $interface_number)
     * @method \FFI\CData libusb_open_device_with_vid_pid(\FFI\CData $ctx, \FFI\CData $vendor_id, \FFI\CData $product_id)
     * @method int libusb_set_interface_alt_setting(\FFI\CData $dev_handle, int $interface_number, int $alternate_setting)
     * @method int libusb_clear_halt(\FFI\CData $dev_handle, char $endpoint)
     * @method int libusb_reset_device(\FFI\CData $dev_handle)
     * @method int libusb_alloc_streams(\FFI\CData $dev_handle, \FFI\CData $num_streams, string $endpoints, int $num_endpoints)
     * @method int libusb_free_streams(\FFI\CData $dev_handle, string $endpoints, int $num_endpoints)
     * @method int libusb_dev_mem_alloc(\FFI\CData $dev_handle, int $length)
     * @method int libusb_dev_mem_free(\FFI\CData $dev_handle, string $buffer, int $length)
     * @method int libusb_kernel_driver_active(\FFI\CData $dev_handle, int $interface_number)
     * @method int libusb_detach_kernel_driver(\FFI\CData $dev_handle, int $interface_number)
     * @method int libusb_attach_kernel_driver(\FFI\CData $dev_handle, int $interface_number)
     * @method int libusb_set_auto_detach_kernel_driver(\FFI\CData $dev_handle, int $enable)
     * @method \FFI\CData libusb_alloc_transfer(int $iso_packets)
     * @method int libusb_submit_transfer(\FFI\CData $transfer)
     * @method int libusb_cancel_transfer(\FFI\CData $transfer)
     * @method void libusb_free_transfer(\FFI\CData $transfer)
     * @method void libusb_transfer_set_stream_id(\FFI\CData $transfer, \FFI\CData $stream_id)
     * @method int libusb_transfer_get_stream_id(\FFI\CData $transfer)
     * @method int libusb_control_transfer(\FFI\CData $dev_handle, int $request_type, int $bRequest, \FFI\CData $wValue, \FFI\CData $wIndex, string $data, \FFI\CData $wLength, int $timeout)
     * @method int libusb_bulk_transfer(\FFI\CData $dev_handle, char $endpoint, string $data, int $length, \FFI\CData $actual_length, int $timeout)
     * @method int libusb_interrupt_transfer(\FFI\CData $dev_handle, char $endpoint, string $data, int $length, \FFI\CData $actual_length, int $timeout)
     * @method int libusb_get_string_descriptor_ascii(\FFI\CData $dev_handle, int $desc_index, string $data, int $length)
     * @method int libusb_try_lock_events(\FFI\CData $ctx)
     * @method void libusb_lock_events(\FFI\CData $ctx)
     * @method void libusb_unlock_events(\FFI\CData $ctx)
     * @method int libusb_event_handling_ok(\FFI\CData $ctx)
     * @method int libusb_event_handler_active(\FFI\CData $ctx)
     * @method void libusb_interrupt_event_handler(\FFI\CData $ctx)
     * @method void libusb_lock_event_waiters(\FFI\CData $ctx)
     * @method void libusb_unlock_event_waiters(\FFI\CData $ctx)
     * @method int libusb_wait_for_event(\FFI\CData $ctx, \FFI\CData $tv)
     * @method int libusb_handle_events_timeout(\FFI\CData $ctx, \FFI\CData $tv)
     * @method int libusb_handle_events_timeout_completed(\FFI\CData $ctx, \FFI\CData $tv, \FFI\CData $completed)
     * @method int libusb_handle_events(\FFI\CData $ctx)
     * @method int libusb_handle_events_completed(\FFI\CData $ctx, \FFI\CData $completed)
     * @method int libusb_handle_events_locked(\FFI\CData $ctx, \FFI\CData $tv)
     * @method int libusb_pollfds_handle_timeouts(\FFI\CData $ctx)
     * @method int libusb_get_next_timeout(\FFI\CData $ctx, \FFI\CData $tv)
     * @method void libusb_free_pollfds(\FFI\CData $pollfds)
     * @method void libusb_set_pollfd_notifiers(\FFI\CData $ctx, \FFI\CData $added_cb, \FFI\CData $removed_cb, \FFI\CData $user_data)
     * @method void libusb_hotplug_deregister_callback(\FFI\CData $ctx, \FFI\CData $callback_handle)
     * @method void libusb_hotplug_get_user_data(\FFI\CData $ctx, \FFI\CData $callback_handle)
     * @method int libusb_set_option(\FFI\CData $ctx, \FFI\CData $option, ...$__VAARGS__)
     */
    class FFIContextProxy implements ContextProxyInterface
    {
        public function __get($name)
        {
        }
    }
}